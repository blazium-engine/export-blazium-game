name: Build Blazium Game

description: >-
  Build Blazium Game for use with macOS, Windows, and Linux CI/CD runners.

author: 'Blazium'
branding:
  icon: 'cpu'
  color: 'white'
inputs:
  blazium-version:
    description: >-
      Blazium Engine version: e.g., 0.1.184-nightly, 0.1.188-nightly, etc. Must include major, minor, and patch.
    default: latest
  game-name:
    description: >-
      Game name: e.g., ProjectHangman
    required: true
  android-package:
    description: >-
      Android package name: e.g., app.blazium.game_android
    default: app.blazium.game_android
  ios-package:
    description: >-
      iOS package name: e.g., app.blazium.game_ios
    default: app.blazium.game_ios
  platform-name:
    description: >-
      Platform to build for name. eg. Windows Desktop x86_64, Linux x86_64, etc. Must match version in editor.
    required: true
  secret-macos-build-certificate-base64:
    description: >-
      Base64 encoded certificate for macOS.
  secret-p12-password:
    description: >-
      P12 password for the certificate.
  secret-keychain-password:
    description: >-
      Keychain password.
  secret-ios-distribution-certificate-base64:
    description: >-
      Base64 encoded distribution certificate for iOS.
  secret-ios-deploy-provision-profile-ios-base64:
    description: >-
      Base64 encoded provisioning profile for iOS.
  secret-apple-id:
    description: >-
      Apple ID.
  secret-apple-team-id:
    description: >-
      Apple Team ID.
  secret-apple-password:
    description: >-
      Apple password or App Specific Password.
  secret-android-keystore-base64:
    description: >-
      Base64 encoded keystore for Android.
  secret-android-keystore-password:
    description: >-
      Android keystore password.
  secret-android-keystore-user:
    description: >-
      Android keystore alias.
  steam-app-id: 
    description: >-
      Steam App ID. If you are not building for Steam, leave it empty. Used only if store-name is set to 'steam'.
    default: ''
  store-name:
    description: >-
      Optional: Store name for the game. Used for versioning and export presets. Also used to know if the game is for Steam.
    default: ''
  base-game-version:
    description: >-
      Base version of the game. Used for versioning and export presets.
    default: '1.0'
  use-cache:
    description: >-
      Use cache.
    default: 'true'

outputs:
  game_version:
    description: "The game message"
    value: ${{ steps.set_version.outputs.game_version }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        repository: blazium-engine/build-game
        fetch-depth: 0
        path: build-game
    - name: Copy deploy scripts
      shell: bash
      run: |
        mkdir -p deploy
        cp -r build-game/deploy/* deploy/
        # Override export_presets.cfg
        mv build-game/export_presets.cfg export_presets.cfg

    - name: Increment Version
      shell: bash
      id: set_version
      run: |
        export STORE_NAME=${{ inputs.store-name }}
        export BASE_GAME_VERSION=${{ inputs.base-game-version }}
        export ANDROID_PACKAGE=${{ inputs.android-package }}
        export IOS_PACKAGE=${{ inputs.ios-package }}
        export APPLE_TEAM_ID=${{ inputs.secret-apple-team-id }}
        python deploy/update_version.py
        GAME_VERSION=$(cat version.txt)
        echo "game_version=$GAME_VERSION" >> $GITHUB_OUTPUT

    - name: Set env vars
      shell: bash
      run: |
        if [ "${{ inputs.platform-name }}" == "Windows Desktop x86_64" ]; then
          echo "platform-extension=.exe" >> $GITHUB_ENV
          echo "platform-type=windows" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Windows Desktop x86_32" ]; then
          echo "platform-extension=.exe" >> $GITHUB_ENV
          echo "platform-type=windows" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Windows Desktop arm64" ]; then
          echo "platform-extension=.exe" >> $GITHUB_ENV
          echo "platform-type=windows" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Windows Desktop arm32" ]; then
          echo "platform-extension=.exe" >> $GITHUB_ENV
          echo "platform-type=windows" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Linux x86_64" ]; then
          echo "platform-extension=.x86_64" >> $GITHUB_ENV
          echo "platform-type=linux" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Linux x86_32" ]; then
          echo "platform-extension=.x86_32" >> $GITHUB_ENV
          echo "platform-type=linux" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "macOS" ]; then
          echo "platform-extension=.app" >> $GITHUB_ENV
          echo "platform-type=macos" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "iOS" ]; then
          echo "platform-extension=.xcarchive" >> $GITHUB_ENV
          echo "platform-type=ios" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Android" ]; then
          echo "platform-extension=.aab" >> $GITHUB_ENV
          echo "platform-type=android" >> $GITHUB_ENV
        elif [ "${{ inputs.platform-name }}" == "Web" ]; then
          echo "platform-extension=.html" >> $GITHUB_ENV
          echo "platform-type=web" >> $GITHUB_ENV
        fi
    - uses: blazium-engine/setup-blazium-engine@master
      name: 🤖 Setup Blazium Engine
      with:
        version: ${{ inputs.blazium-version }}
        download_template: true
        use-cache: ${{ inputs.use-cache }}

    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
    - name: Install the Apple certificate and provisioning profile for macOS
      shell: bash
      if: env.platform-type == 'macos' && inputs.secret-macos-build-certificate-base64 != ''
      env:
        # Developer ID Certificate
        BUILD_CERTIFICATE_BASE64: ${{ inputs.secret-macos-build-certificate-base64 }}
        P12_PASSWORD: ${{ inputs.secret-p12-password }}
        KEYCHAIN_PASSWORD: ${{ inputs.secret-keychain-password }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        SIGNING_IDENTITY=$(security find-identity -p codesigning -v | awk -F'"' 'NR==1 {print $2}')
        echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV

    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
    - name: Install the Apple certificate and provisioning profile for iOS
      shell: bash
      if: env.platform-type == 'ios' && inputs.secret-ios-distribution-certificate-base64 != ''
      env:
        DISTRIBUTION_CERTIFICATE_BASE64: ${{ inputs.secret-ios-distribution-certificate-base64 }}
        P12_PASSWORD: ${{ inputs.secret-p12-password }}
        DEPLOY_PROVISION_PROFILE_IOS_BASE64: ${{ inputs.secret-ios-deploy-provision-profile-ios-base64 }}
        KEYCHAIN_PASSWORD: ${{ inputs.secret-keychain-password }}
      run: |
        # create variables
        BASE_DEPLOY_CERTIFICATE_PATH=$RUNNER_TEMP/base_certificate.p12
        PP_PATH=$RUNNER_TEMP/ios_deploy_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $BASE_DEPLOY_CERTIFICATE_PATH
        echo -n "$DEPLOY_PROVISION_PROFILE_IOS_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        # Import first certificate
        security import $BASE_DEPLOY_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security find-identity -p basic -v
        SIGNING_IDENTITY=$(security find-identity -p basic -v | awk -F'"' 'NR==1 {print $2}')
        echo "DEPLOY_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV

        # apply provisioning profile
        
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

        # Set UUID
        echo "PP_UUID=$(grep -a -A 1 'UUID' $PP_PATH | grep string | sed -e "s|<string>||" -e "s|</string>||" | tr -d '\t')" >> $GITHUB_ENV
        uuid=`grep UUID -A1 -a $PP_PATH | grep -io "[-A-F0-9]\{36\}"`
        cp $PP_PATH "$HOME/Library/MobileDevice/Provisioning Profiles/$uuid.mobileprovision"
        
        ls "$HOME/Library/MobileDevice/Provisioning Profiles"

    - name: Set up JDK 17
      if: env.platform-type == 'android'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      if: env.platform-type == 'android'
      uses: android-actions/setup-android@v2

    - name: Set Android SDK path in Editor settings
      if: env.platform-type == 'android'
      shell: bash
      env:
        SETTINGS: |
          [gd_resource type="EditorSettings" format=3]

          [resource]
          export/android/android_sdk_path = "/usr/local/lib/android/sdk"
      run: |
        mkdir -p ~/.config/godot/
        echo -n "${{ inputs.secret-android-keystore-base64 }}" | base64 --decode > ${{ github.workspace }}/release.keystore
        chmod +rw "${{ github.workspace }}/release.keystore"
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PATH=\"${{ github.workspace }}/release.keystore\"" >> $GITHUB_ENV
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_USER=\"${{ inputs.secret-android-keystore-user }}\"" >> $GITHUB_ENV
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=\"${{ inputs.secret-android-keystore-password }}\"" >> $GITHUB_ENV
        printf "%s\n" "$SETTINGS" > ~/.config/godot/editor_settings-4.tres

    - name: Install Android build template
      if: env.platform-type == 'android'
      shell: bash
      run: |
        mkdir -p android/build
        chmod 600 "$BLAZIUM_TEMPLATE/android_source.zip"
        # Replace - with .
        if [[ "${{ env.BLAZIUM_INSTALLED_VERSION }}" != *-* ]]; then
            version_dot="${{ env.BLAZIUM_INSTALLED_VERSION }}.release"
        else
            version_dot=$(echo "${{ env.BLAZIUM_INSTALLED_VERSION }}" | sed 's/-/./')
        fi
        echo "$version_dot"
        echo "$version_dot" >> android/.build_version
        unzip $BLAZIUM_TEMPLATE/android_source.zip  -d android/build
        adb start-server

    - name: Setup WINE and rcedit 🍷
      shell: bash
      if: env.platform-type == 'windows'
      run: |
        # Avoid interaction during installation
        export DEBIAN_FRONTEND=noninteractive
        export WINEDEBUG=-all
        export DISPLAY="localhost:0" 

        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends wine32 wine64 imagemagick wine-stable icnsutils --fix-missing
        sudo wget https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe
        sudo mkdir -v -p ~/.local/share/rcedit
        sudo mv rcedit-x64.exe ~/.local/share/rcedit
        sudo ls ~/.local/share/rcedit

    - name: Set rcedit path in the Editor settings
      if: env.platform-type == 'windows'
      shell: bash
      env:
        SETTINGS: |
          [gd_resource type="EditorSettings" format=3]

          [resource]
          export/windows/wine = "/usr/bin/wine"
          export/windows/rcedit = "$HOME/.local/share/rcedit/rcedit-x64.exe"
      run: |
        mkdir -p ~/.config/godot/
        printf "%s\n" "$SETTINGS" > ~/.config/godot/editor_settings-4.tres

    - name: 🔬 Verify Setup
      shell: bash
      run: |
        Blazium --version

    - name: 🚀 Build Game
      shell: bash
      if: env.platform-type != 'web' && env.platform-type != 'ios' && env.platform-type != 'android'
      run: |
        mkdir -p build/
        Blazium --headless --verbose --export-release "${{ inputs.platform-name }}" build/${{ inputs.game-name }}${{ env.platform-extension }}
    
    - name: 🚀 Build Android Game
      shell: bash
      if: env.platform-type == 'android'
      run: |
        mkdir -p build/
        # Check if inputs.secret-android-keystore-base64 is empty, do a debug build
        BUILD_TYPE_FLAG="--export-release"
        if [ "${{ inputs.secret-android-keystore-base64 }}" == '' ]; then
          echo "No keystore provided, doing a debug build"
          BUILD_TYPE_FLAG="--export-debug"
        fi
        GODOT_ANDROID_KEYSTORE_RELEASE_PATH="${{ github.workspace }}/release.keystore" && Blazium --headless --verbose $BUILD_TYPE_FLAG "${{ inputs.platform-name }}" build/${{ inputs.game-name }}${{ env.platform-extension }}

    - name: 🚀 Build Project iOS
      shell: bash
      if: env.platform-type == 'ios' && inputs.secret-apple-team-id != '' && inputs.secret-apple-id
      run: |
        mkdir -p project/
        Blazium --headless --export-release --verbose "${{ inputs.platform-name }}" project/${{ inputs.game-name }}${{ env.platform-extension }}
    
    - name: 🚀 Build Web Game
      shell: bash
      if: env.platform-type == 'web'
      run: |
        mkdir -p build/
        Blazium --headless --export-release --verbose "${{ inputs.platform-name }}" build/index${{ env.platform-extension }}
    
    - uses: maxim-lobanov/setup-xcode@v1
      if: env.platform-type == 'ios'
      with:
        xcode-version: 16.1

    - name: Build for iOS
      shell: bash
      working-directory: project
      if: env.platform-type == 'ios'
      run: |
        xcodebuild -showsdks
        ls "$HOME/Library/MobileDevice/Provisioning Profiles"
        xcodebuild -resolvePackageDependencies

        # Build
        #set -eo pipefail
        echo "Using following:"
        echo Certificate identity: $DEPLOY_SIGNING_IDENTITY
        echo PP UUID $PP_UUID
        ls "$HOME/Library/MobileDevice/Provisioning Profiles/"
        security find-identity -v -p codesigning
        cp ../deploy/ios/exportOptions.plist .
        # Replace PP_UUID
        sed -i '' "s/PP_UUID/$PP_UUID/g" exportOptions.plist
        # Replace APPLE_TEAM_ID
        sed -i '' "s/APPLE_TEAM_ID/${{ inputs.secret-apple-team-id }}/g" exportOptions.plist
        xcodebuild clean archive \
          -verbose \
          -scheme ${{ inputs.game-name }} \
          -configuration "Release" \
          -sdk iphoneos \
          -archivePath "${{ inputs.game-name }}.xcarchive" \
          -destination "generic/platform=iOS,name=Any iOS Device" \
          OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
          CODE_SIGN_STYLE=Manual \
          PROVISIONING_PROFILE=$PP_UUID \
          CODE_SIGN_IDENTITY="$DEPLOY_SIGNING_IDENTITY"
        
        # Export ipa
        set -eo pipefail
        xcodebuild -archivePath "${{ inputs.game-name }}.xcarchive" \
          -exportOptionsPlist exportOptions.plist \
          -exportPath build \
          -allowProvisioningUpdates \
          -exportArchive
        
        mkdir -p ../build
        mv build/${{ inputs.game-name }}.ipa ../build/${{ inputs.game-name }}.ipa

    - name: Sign for macos (non-steam)
      shell: bash
      if: env.platform-type == 'macos' && inputs.secret-macos-build-certificate-base64 != '' && inputs.store-name != 'steam'
      working-directory: build
      run: |
        # Remove wrong attributes
        xattr -cr ${{ inputs.game-name }}.app

        # Set permissions and sign the application
        chmod +x ${{ inputs.game-name }}.app
        # Set permission and sign the binary
        chmod +x ${{ inputs.game-name }}.app/Contents/MacOS/*

        codesign --deep --force --options=runtime --verbose --timestamp \
          --entitlements ../deploy/mac/entitlements.plist --sign "${{ env.APPLE_SIGNING_IDENTITY }}" \
          ${{ inputs.game-name }}.app

        # Package the application into a zip file
        zip -q -9 -r ${{ inputs.game-name }}.zip ${{ inputs.game-name }}.app

        /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool store-credentials "AppleID" --apple-id "${{ inputs.secret-apple-id }}" --password "${{ inputs.secret-apple-password }}" --team-id "${{ inputs.secret-apple-team-id }}"

        /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit ${{ inputs.game-name }}.zip --wait --keychain-profile "AppleID"

        xcrun stapler staple ${{ inputs.game-name }}.app
        rm ${{ inputs.game-name }}.zip

    - name: Sign for macos (steam)
      if: env.platform-type == 'macos' && inputs.secret-macos-build-certificate-base64 != '' && inputs.store-name == 'steam'
      shell: bash
      working-directory: build
      run: |
        # Remove wrong attributes
        xattr -cr ${{ inputs.game-name }}.app

        # Set permissions and sign the application
        chmod +x ${{ inputs.game-name }}.app
        # Set permission and sign the binary
        chmod +x ${{ inputs.game-name }}.app/Contents/MacOS/*
        
        codesign --deep --force --options=runtime --verbose --timestamp \
          --entitlements ../deploy/mac/entitlements-steam.plist --sign "${{ env.APPLE_SIGNING_IDENTITY }}" \
          ${{ inputs.game-name }}.app
        codesign --verify --strict --deep --verbose ${{ inputs.game-name }}.app
        # Package the application into a zip file
        ditto -c -k --keepParent ${{ inputs.game-name }}.app ${{ inputs.game-name }}.zip

        /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool store-credentials "AppleID" --apple-id "${{ inputs.secret-apple-id }}" --password "${{ inputs.secret-apple-password }}" --team-id "${{ inputs.secret-apple-team-id }}"

        /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit ${{ inputs.game-name }}.zip --wait --keychain-profile "AppleID"

        xcrun stapler staple ${{ inputs.game-name }}.app
        rm ${{ inputs.game-name }}.zip

    - name: List Files
      shell: bash
      run: |
        ls -la
        ls -la build
        # find .aab files
        find . -name "*.aab"

    - uses: actions/checkout@v4
      if: inputs.steam-app-id != '' && inputs.store-name == 'steam'
      with:
        repository: blazium-engine/steamworks
        path: steamworks

    - name: Copy steam dlls
      if: inputs.steam-app-id != '' && inputs.store-name == 'steam'
      shell: bash
      run: |
        if [[ "${{ matrix.platform.name }}" == "Windows Desktop x86_64" ]]; then
          cp ./steamworks/redistributable_bin/win64/steam_api64.dll ./build/
          echo ${{ inputs.steam-app-id }} > ./build/steam_appid.txt
        fi
        if [[ "${{ matrix.platform.name }}" == "Windows Desktop x86_32" ]]; then
          cp ./steamworks/redistributable_bin/steam_api.dll ./build/
          echo ${{ inputs.steam-app-id }} > ./build/steam_appid.txt
        fi
        if [[ "${{ matrix.platform.name }}" == "Linux x86_64" ]]; then
          cp ./steamworks/redistributable_bin/linux64/libsteam_api.so ./build/
          echo ${{ inputs.steam-app-id }} > ./build/steam_appid.txt
        fi
        if [[ "${{ matrix.platform.name }}" == "Linux x86_32" ]]; then
          cp ./steamworks/redistributable_bin/linux32/libsteam_api.so ./build/
          echo ${{ inputs.steam-app-id }} > ./build/steam_appid.txt
        fi
        if [[ "${{ matrix.platform.name }}" == "macOS" ]]; then
          cp ./steamworks/redistributable_bin/osx/libsteam_api.dylib ./build/${{ inputs.game_name }}.app/Contents/MacOS/
          chmod +x ./build/${{ inputs.game_name }}.app/Contents/MacOS/*
          echo ${{ inputs.steam-app-id }} > ./build/${{ inputs.game_name }}.app/Contents/MacOS/steam_appid.txt
        fi

